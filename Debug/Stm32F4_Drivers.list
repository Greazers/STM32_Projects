
Stm32F4_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004cc  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000674  0800067c  0001067c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000674  08000674  0001067c  2**0
                  CONTENTS
  4 .ARM          00000000  08000674  08000674  0001067c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000674  0800067c  0001067c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000674  08000674  00010674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000678  08000678  00010678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001067c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001067c  2**0
                  CONTENTS
 10 .bss          00000028  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0001067c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000087e  00000000  00000000  000106a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000241  00000000  00000000  00010f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c0  00000000  00000000  00011168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000098  00000000  00000000  00011228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000240a  00000000  00000000  000112c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000e3e  00000000  00000000  000136ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000916a  00000000  00000000  00014508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001d672  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000248  00000000  00000000  0001d6c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800065c 	.word	0x0800065c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	0800065c 	.word	0x0800065c

080001e8 <GPIO_PClkControl>:
#include "Driver_gpio.h"


//GPIO Clock Enable
void GPIO_PClkControl(GPIO_RegDef_t *pGPIOx, uint8_t EN_DI )
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	460b      	mov	r3, r1
 80001f2:	70fb      	strb	r3, [r7, #3]
	if(EN_DI == ENABLE)
 80001f4:	78fb      	ldrb	r3, [r7, #3]
 80001f6:	2b01      	cmp	r3, #1
 80001f8:	d153      	bne.n	80002a2 <GPIO_PClkControl+0xba>
	{
		if( pGPIOx == GPIOA){
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a55      	ldr	r2, [pc, #340]	; (8000354 <GPIO_PClkControl+0x16c>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d106      	bne.n	8000210 <GPIO_PClkControl+0x28>
			GPIOA_PCLK_EN();
 8000202:	4b55      	ldr	r3, [pc, #340]	; (8000358 <GPIO_PClkControl+0x170>)
 8000204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000206:	4a54      	ldr	r2, [pc, #336]	; (8000358 <GPIO_PClkControl+0x170>)
 8000208:	f043 0301 	orr.w	r3, r3, #1
 800020c:	6313      	str	r3, [r2, #48]	; 0x30
		}
		else{
			GPIOH_PCLK_DI();
		}
	}
}
 800020e:	e09b      	b.n	8000348 <GPIO_PClkControl+0x160>
		else if( pGPIOx == GPIOB){
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4a52      	ldr	r2, [pc, #328]	; (800035c <GPIO_PClkControl+0x174>)
 8000214:	4293      	cmp	r3, r2
 8000216:	d106      	bne.n	8000226 <GPIO_PClkControl+0x3e>
			GPIOB_PCLK_EN();
 8000218:	4b4f      	ldr	r3, [pc, #316]	; (8000358 <GPIO_PClkControl+0x170>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021c:	4a4e      	ldr	r2, [pc, #312]	; (8000358 <GPIO_PClkControl+0x170>)
 800021e:	f043 0302 	orr.w	r3, r3, #2
 8000222:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000224:	e090      	b.n	8000348 <GPIO_PClkControl+0x160>
		else if( pGPIOx == GPIOC){
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a4d      	ldr	r2, [pc, #308]	; (8000360 <GPIO_PClkControl+0x178>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d106      	bne.n	800023c <GPIO_PClkControl+0x54>
			GPIOC_PCLK_EN();
 800022e:	4b4a      	ldr	r3, [pc, #296]	; (8000358 <GPIO_PClkControl+0x170>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000232:	4a49      	ldr	r2, [pc, #292]	; (8000358 <GPIO_PClkControl+0x170>)
 8000234:	f043 0304 	orr.w	r3, r3, #4
 8000238:	6313      	str	r3, [r2, #48]	; 0x30
}
 800023a:	e085      	b.n	8000348 <GPIO_PClkControl+0x160>
		else if( pGPIOx == GPIOD){
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a49      	ldr	r2, [pc, #292]	; (8000364 <GPIO_PClkControl+0x17c>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d106      	bne.n	8000252 <GPIO_PClkControl+0x6a>
			GPIOD_PCLK_EN();
 8000244:	4b44      	ldr	r3, [pc, #272]	; (8000358 <GPIO_PClkControl+0x170>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000248:	4a43      	ldr	r2, [pc, #268]	; (8000358 <GPIO_PClkControl+0x170>)
 800024a:	f043 0308 	orr.w	r3, r3, #8
 800024e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000250:	e07a      	b.n	8000348 <GPIO_PClkControl+0x160>
		else if( pGPIOx == GPIOE){
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a44      	ldr	r2, [pc, #272]	; (8000368 <GPIO_PClkControl+0x180>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d106      	bne.n	8000268 <GPIO_PClkControl+0x80>
			GPIOE_PCLK_EN();
 800025a:	4b3f      	ldr	r3, [pc, #252]	; (8000358 <GPIO_PClkControl+0x170>)
 800025c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025e:	4a3e      	ldr	r2, [pc, #248]	; (8000358 <GPIO_PClkControl+0x170>)
 8000260:	f043 0310 	orr.w	r3, r3, #16
 8000264:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000266:	e06f      	b.n	8000348 <GPIO_PClkControl+0x160>
		else if( pGPIOx == GPIOF){
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a40      	ldr	r2, [pc, #256]	; (800036c <GPIO_PClkControl+0x184>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d106      	bne.n	800027e <GPIO_PClkControl+0x96>
			GPIOF_PCLK_EN();
 8000270:	4b39      	ldr	r3, [pc, #228]	; (8000358 <GPIO_PClkControl+0x170>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000274:	4a38      	ldr	r2, [pc, #224]	; (8000358 <GPIO_PClkControl+0x170>)
 8000276:	f043 0320 	orr.w	r3, r3, #32
 800027a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800027c:	e064      	b.n	8000348 <GPIO_PClkControl+0x160>
		else if( pGPIOx == GPIOG){
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4a3b      	ldr	r2, [pc, #236]	; (8000370 <GPIO_PClkControl+0x188>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d106      	bne.n	8000294 <GPIO_PClkControl+0xac>
			GPIOG_PCLK_EN();
 8000286:	4b34      	ldr	r3, [pc, #208]	; (8000358 <GPIO_PClkControl+0x170>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028a:	4a33      	ldr	r2, [pc, #204]	; (8000358 <GPIO_PClkControl+0x170>)
 800028c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000290:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000292:	e059      	b.n	8000348 <GPIO_PClkControl+0x160>
			GPIOH_PCLK_EN();
 8000294:	4b30      	ldr	r3, [pc, #192]	; (8000358 <GPIO_PClkControl+0x170>)
 8000296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000298:	4a2f      	ldr	r2, [pc, #188]	; (8000358 <GPIO_PClkControl+0x170>)
 800029a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800029e:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a0:	e052      	b.n	8000348 <GPIO_PClkControl+0x160>
		if( pGPIOx == GPIOA){
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4a2b      	ldr	r2, [pc, #172]	; (8000354 <GPIO_PClkControl+0x16c>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d106      	bne.n	80002b8 <GPIO_PClkControl+0xd0>
			GPIOA_PCLK_DI();
 80002aa:	4b2b      	ldr	r3, [pc, #172]	; (8000358 <GPIO_PClkControl+0x170>)
 80002ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ae:	4a2a      	ldr	r2, [pc, #168]	; (8000358 <GPIO_PClkControl+0x170>)
 80002b0:	f023 0301 	bic.w	r3, r3, #1
 80002b4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002b6:	e047      	b.n	8000348 <GPIO_PClkControl+0x160>
		else if( pGPIOx == GPIOB){
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	4a28      	ldr	r2, [pc, #160]	; (800035c <GPIO_PClkControl+0x174>)
 80002bc:	4293      	cmp	r3, r2
 80002be:	d106      	bne.n	80002ce <GPIO_PClkControl+0xe6>
			GPIOB_PCLK_DI();
 80002c0:	4b25      	ldr	r3, [pc, #148]	; (8000358 <GPIO_PClkControl+0x170>)
 80002c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c4:	4a24      	ldr	r2, [pc, #144]	; (8000358 <GPIO_PClkControl+0x170>)
 80002c6:	f023 0302 	bic.w	r3, r3, #2
 80002ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002cc:	e03c      	b.n	8000348 <GPIO_PClkControl+0x160>
		else if( pGPIOx == GPIOC){
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	4a23      	ldr	r2, [pc, #140]	; (8000360 <GPIO_PClkControl+0x178>)
 80002d2:	4293      	cmp	r3, r2
 80002d4:	d106      	bne.n	80002e4 <GPIO_PClkControl+0xfc>
			GPIOC_PCLK_DI();
 80002d6:	4b20      	ldr	r3, [pc, #128]	; (8000358 <GPIO_PClkControl+0x170>)
 80002d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002da:	4a1f      	ldr	r2, [pc, #124]	; (8000358 <GPIO_PClkControl+0x170>)
 80002dc:	f023 0304 	bic.w	r3, r3, #4
 80002e0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002e2:	e031      	b.n	8000348 <GPIO_PClkControl+0x160>
		else if( pGPIOx == GPIOD){
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	4a1f      	ldr	r2, [pc, #124]	; (8000364 <GPIO_PClkControl+0x17c>)
 80002e8:	4293      	cmp	r3, r2
 80002ea:	d106      	bne.n	80002fa <GPIO_PClkControl+0x112>
			GPIOD_PCLK_DI();
 80002ec:	4b1a      	ldr	r3, [pc, #104]	; (8000358 <GPIO_PClkControl+0x170>)
 80002ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f0:	4a19      	ldr	r2, [pc, #100]	; (8000358 <GPIO_PClkControl+0x170>)
 80002f2:	f023 0308 	bic.w	r3, r3, #8
 80002f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002f8:	e026      	b.n	8000348 <GPIO_PClkControl+0x160>
		else if( pGPIOx == GPIOE){
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	4a1a      	ldr	r2, [pc, #104]	; (8000368 <GPIO_PClkControl+0x180>)
 80002fe:	4293      	cmp	r3, r2
 8000300:	d106      	bne.n	8000310 <GPIO_PClkControl+0x128>
			GPIOE_PCLK_DI();
 8000302:	4b15      	ldr	r3, [pc, #84]	; (8000358 <GPIO_PClkControl+0x170>)
 8000304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000306:	4a14      	ldr	r2, [pc, #80]	; (8000358 <GPIO_PClkControl+0x170>)
 8000308:	f023 0310 	bic.w	r3, r3, #16
 800030c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800030e:	e01b      	b.n	8000348 <GPIO_PClkControl+0x160>
		else if( pGPIOx == GPIOF){
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	4a16      	ldr	r2, [pc, #88]	; (800036c <GPIO_PClkControl+0x184>)
 8000314:	4293      	cmp	r3, r2
 8000316:	d106      	bne.n	8000326 <GPIO_PClkControl+0x13e>
			GPIOF_PCLK_DI();
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <GPIO_PClkControl+0x170>)
 800031a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800031c:	4a0e      	ldr	r2, [pc, #56]	; (8000358 <GPIO_PClkControl+0x170>)
 800031e:	f023 0320 	bic.w	r3, r3, #32
 8000322:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000324:	e010      	b.n	8000348 <GPIO_PClkControl+0x160>
		else if( pGPIOx == GPIOG){
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	4a11      	ldr	r2, [pc, #68]	; (8000370 <GPIO_PClkControl+0x188>)
 800032a:	4293      	cmp	r3, r2
 800032c:	d106      	bne.n	800033c <GPIO_PClkControl+0x154>
			GPIOG_PCLK_DI();
 800032e:	4b0a      	ldr	r3, [pc, #40]	; (8000358 <GPIO_PClkControl+0x170>)
 8000330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000332:	4a09      	ldr	r2, [pc, #36]	; (8000358 <GPIO_PClkControl+0x170>)
 8000334:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000338:	6313      	str	r3, [r2, #48]	; 0x30
}
 800033a:	e005      	b.n	8000348 <GPIO_PClkControl+0x160>
			GPIOH_PCLK_DI();
 800033c:	4b06      	ldr	r3, [pc, #24]	; (8000358 <GPIO_PClkControl+0x170>)
 800033e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000340:	4a05      	ldr	r2, [pc, #20]	; (8000358 <GPIO_PClkControl+0x170>)
 8000342:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000346:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000348:	bf00      	nop
 800034a:	370c      	adds	r7, #12
 800034c:	46bd      	mov	sp, r7
 800034e:	bc80      	pop	{r7}
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	40020000 	.word	0x40020000
 8000358:	40023800 	.word	0x40023800
 800035c:	40020400 	.word	0x40020400
 8000360:	40020800 	.word	0x40020800
 8000364:	40020c00 	.word	0x40020c00
 8000368:	40021000 	.word	0x40021000
 800036c:	40021400 	.word	0x40021400
 8000370:	40021800 	.word	0x40021800

08000374 <GPIO_Init>:
// GPIO Init
void GPIO_Init(GPIO_Handle_t *pGPIoHandle)
{
 8000374:	b490      	push	{r4, r7}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	//Note: GPIO_Handle_t is filled by user from application layer. And this API will Fill that info to GPIO's Peripheral Registers
	//1. Mode of pin
	if(pGPIoHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	795b      	ldrb	r3, [r3, #5]
 8000380:	2b03      	cmp	r3, #3
 8000382:	d81e      	bhi.n	80003c2 <GPIO_Init+0x4e>
		//Non Interrupt
		pGPIoHandle->GPIO_RegConfig->MODER &= ~(0x03 <<  (2 * pGPIoHandle->GPIO_PinConfig.GPIO_PinNo)); // clear Register before setting its value
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	681a      	ldr	r2, [r3, #0]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	791b      	ldrb	r3, [r3, #4]
 800038e:	005b      	lsls	r3, r3, #1
 8000390:	2103      	movs	r1, #3
 8000392:	fa01 f303 	lsl.w	r3, r1, r3
 8000396:	43db      	mvns	r3, r3
 8000398:	4619      	mov	r1, r3
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	400a      	ands	r2, r1
 80003a0:	601a      	str	r2, [r3, #0]
		pGPIoHandle->GPIO_RegConfig->MODER |= ((pGPIoHandle->GPIO_PinConfig.GPIO_PinMode) << (2 * pGPIoHandle->GPIO_PinConfig.GPIO_PinNo));
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	681a      	ldr	r2, [r3, #0]
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	795b      	ldrb	r3, [r3, #5]
 80003ac:	4619      	mov	r1, r3
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	791b      	ldrb	r3, [r3, #4]
 80003b2:	005b      	lsls	r3, r3, #1
 80003b4:	fa01 f303 	lsl.w	r3, r1, r3
 80003b8:	4619      	mov	r1, r3
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	430a      	orrs	r2, r1
 80003c0:	601a      	str	r2, [r3, #0]
	else{
		//interrupt
	}

	//2. Speed of Pin
	pGPIoHandle->GPIO_RegConfig->OSPEEDR &= ~(0x03 <<  (2 * pGPIoHandle->GPIO_PinConfig.GPIO_PinNo)); // clear Register before setting its value
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	689a      	ldr	r2, [r3, #8]
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	791b      	ldrb	r3, [r3, #4]
 80003cc:	005b      	lsls	r3, r3, #1
 80003ce:	2103      	movs	r1, #3
 80003d0:	fa01 f303 	lsl.w	r3, r1, r3
 80003d4:	43db      	mvns	r3, r3
 80003d6:	4619      	mov	r1, r3
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	400a      	ands	r2, r1
 80003de:	609a      	str	r2, [r3, #8]
	pGPIoHandle->GPIO_RegConfig->OSPEEDR |= (pGPIoHandle->GPIO_PinConfig.GPIO_PinSpeed  << (2 * pGPIoHandle->GPIO_PinConfig.GPIO_PinNo));
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	689a      	ldr	r2, [r3, #8]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	799b      	ldrb	r3, [r3, #6]
 80003ea:	4619      	mov	r1, r3
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	791b      	ldrb	r3, [r3, #4]
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	fa01 f303 	lsl.w	r3, r1, r3
 80003f6:	4619      	mov	r1, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	430a      	orrs	r2, r1
 80003fe:	609a      	str	r2, [r3, #8]


	//3. pupd setting
	pGPIoHandle->GPIO_RegConfig->PUPDR &= ~(0x03 <<  (2 * pGPIoHandle->GPIO_PinConfig.GPIO_PinNo)); // clear Register before setting its value
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	68da      	ldr	r2, [r3, #12]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	791b      	ldrb	r3, [r3, #4]
 800040a:	005b      	lsls	r3, r3, #1
 800040c:	2103      	movs	r1, #3
 800040e:	fa01 f303 	lsl.w	r3, r1, r3
 8000412:	43db      	mvns	r3, r3
 8000414:	4619      	mov	r1, r3
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	400a      	ands	r2, r1
 800041c:	60da      	str	r2, [r3, #12]
	pGPIoHandle->GPIO_RegConfig->PUPDR |= (pGPIoHandle->GPIO_PinConfig.GPIO_PinPuPdCtr << (2 * pGPIoHandle->GPIO_PinConfig.GPIO_PinNo));
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	68da      	ldr	r2, [r3, #12]
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	79db      	ldrb	r3, [r3, #7]
 8000428:	4619      	mov	r1, r3
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	791b      	ldrb	r3, [r3, #4]
 800042e:	005b      	lsls	r3, r3, #1
 8000430:	fa01 f303 	lsl.w	r3, r1, r3
 8000434:	4619      	mov	r1, r3
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	430a      	orrs	r2, r1
 800043c:	60da      	str	r2, [r3, #12]

	//4. OP type
	pGPIoHandle->GPIO_RegConfig->OTYPER &= ~(0x01 <<  pGPIoHandle->GPIO_PinConfig.GPIO_PinNo); // clear Register before setting its value
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	685a      	ldr	r2, [r3, #4]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	791b      	ldrb	r3, [r3, #4]
 8000448:	4619      	mov	r1, r3
 800044a:	2301      	movs	r3, #1
 800044c:	408b      	lsls	r3, r1
 800044e:	43db      	mvns	r3, r3
 8000450:	4619      	mov	r1, r3
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	400a      	ands	r2, r1
 8000458:	605a      	str	r2, [r3, #4]
	pGPIoHandle->GPIO_RegConfig->OTYPER |= (pGPIoHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIoHandle->GPIO_PinConfig.GPIO_PinNo);
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	685a      	ldr	r2, [r3, #4]
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	7a1b      	ldrb	r3, [r3, #8]
 8000464:	4619      	mov	r1, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	791b      	ldrb	r3, [r3, #4]
 800046a:	fa01 f303 	lsl.w	r3, r1, r3
 800046e:	4619      	mov	r1, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	430a      	orrs	r2, r1
 8000476:	605a      	str	r2, [r3, #4]

	//5. Alternate function
	//uint8_t AF_reg = pGPIoHandle->GPIO_PinConfig.GPIO_PinNo/8;
	if(pGPIoHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	795b      	ldrb	r3, [r3, #5]
 800047c:	2b02      	cmp	r3, #2
 800047e:	d138      	bne.n	80004f2 <GPIO_Init+0x17e>

		pGPIoHandle->GPIO_RegConfig->AFR[pGPIoHandle->GPIO_PinConfig.GPIO_PinNo/8] &= ~(0x0F << (( pGPIoHandle->GPIO_PinConfig.GPIO_PinNo % 8) * 4));
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	7912      	ldrb	r2, [r2, #4]
 8000488:	08d2      	lsrs	r2, r2, #3
 800048a:	b2d0      	uxtb	r0, r2
 800048c:	4602      	mov	r2, r0
 800048e:	3208      	adds	r2, #8
 8000490:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	791b      	ldrb	r3, [r3, #4]
 8000498:	f003 0307 	and.w	r3, r3, #7
 800049c:	009b      	lsls	r3, r3, #2
 800049e:	210f      	movs	r1, #15
 80004a0:	fa01 f303 	lsl.w	r3, r1, r3
 80004a4:	43db      	mvns	r3, r3
 80004a6:	4619      	mov	r1, r3
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4011      	ands	r1, r2
 80004ae:	f100 0208 	add.w	r2, r0, #8
 80004b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		pGPIoHandle->GPIO_RegConfig->AFR[pGPIoHandle->GPIO_PinConfig.GPIO_PinNo/8] |= (pGPIoHandle->GPIO_PinConfig.GPIO_PinAF_Mode << (( pGPIoHandle->GPIO_PinConfig.GPIO_PinNo % 8) * 4));
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	687a      	ldr	r2, [r7, #4]
 80004bc:	7912      	ldrb	r2, [r2, #4]
 80004be:	08d2      	lsrs	r2, r2, #3
 80004c0:	b2d1      	uxtb	r1, r2
 80004c2:	460a      	mov	r2, r1
 80004c4:	3208      	adds	r2, #8
 80004c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	7a5b      	ldrb	r3, [r3, #9]
 80004ce:	4618      	mov	r0, r3
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	791b      	ldrb	r3, [r3, #4]
 80004d4:	f003 0307 	and.w	r3, r3, #7
 80004d8:	009b      	lsls	r3, r3, #2
 80004da:	fa00 f303 	lsl.w	r3, r0, r3
 80004de:	461c      	mov	r4, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4608      	mov	r0, r1
 80004e6:	ea42 0104 	orr.w	r1, r2, r4
 80004ea:	f100 0208 	add.w	r2, r0, #8
 80004ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc90      	pop	{r4, r7}
 80004fa:	4770      	bx	lr

080004fc <GPIO_ToggleOutPin>:
void GPIO_WriteToOutPort(GPIO_RegDef_t *pGPIOx, uint16_t value)
{
	pGPIOx->ODR = (uint32_t)value;
}
void GPIO_ToggleOutPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNo)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	460b      	mov	r3, r1
 8000506:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNo) ;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	695b      	ldr	r3, [r3, #20]
 800050c:	78fa      	ldrb	r2, [r7, #3]
 800050e:	2101      	movs	r1, #1
 8000510:	fa01 f202 	lsl.w	r2, r1, r2
 8000514:	405a      	eors	r2, r3
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	615a      	str	r2, [r3, #20]
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr

08000524 <delay>:
 * Pointers specific to GPIO Registers*/

GPIO_Handle_t GPIOD_Handle ;

void delay(uint32_t time)
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	for (int var = 0; var < time; ) {
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	e002      	b.n	8000538 <delay+0x14>
		var++;
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	3301      	adds	r3, #1
 8000536:	60fb      	str	r3, [r7, #12]
	for (int var = 0; var < time; ) {
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	687a      	ldr	r2, [r7, #4]
 800053c:	429a      	cmp	r2, r3
 800053e:	d8f8      	bhi.n	8000532 <delay+0xe>
	}
}
 8000540:	bf00      	nop
 8000542:	bf00      	nop
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr

0800054c <vLedConfig>:

void vLedConfig(GPIO_Handle_t *ptrGPIOD_Handle){
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	ptrGPIOD_Handle->GPIO_RegConfig = GPIOD;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	4a0f      	ldr	r2, [pc, #60]	; (8000594 <vLedConfig+0x48>)
 8000558:	601a      	str	r2, [r3, #0]
	ptrGPIOD_Handle->GPIO_PinConfig.GPIO_PinMode    = GPIO_MODE_OUT;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2201      	movs	r2, #1
 800055e:	715a      	strb	r2, [r3, #5]
	ptrGPIOD_Handle->GPIO_PinConfig.GPIO_PinNo      = GPIO_PIN_NO_12;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	220c      	movs	r2, #12
 8000564:	711a      	strb	r2, [r3, #4]
	ptrGPIOD_Handle->GPIO_PinConfig.GPIO_PinOPType  = GPIO_OP_TYPE_OD;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2201      	movs	r2, #1
 800056a:	721a      	strb	r2, [r3, #8]
	/*If Push Pull Config used internal pMOS-NMOS combination is used, so no PU,PD resistors required to blink LED
	ptrGPIOD_Handle->GPIO_PinConfig.GPIO_PinOPType  = GPIO_OP_TYPE_PP; */
	ptrGPIOD_Handle->GPIO_PinConfig.GPIO_PinPuPdCtr = GPIO_PIN_PU; /* With Open Drain config, use no PUPD and use External Resistor of smaller value.
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	2201      	movs	r2, #1
 8000570:	71da      	strb	r2, [r3, #7]
																	Since inbuild Pull up resisitor is of larger value very small current willl flow
																	through LED causing LED blink in PU config with very Dim intensity.*/
	ptrGPIOD_Handle->GPIO_PinConfig.GPIO_PinSpeed   = GPIO_SPEED_MED;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2201      	movs	r2, #1
 8000576:	719a      	strb	r2, [r3, #6]
	GPIO_PClkControl(ptrGPIOD_Handle->GPIO_RegConfig, ENABLE);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2101      	movs	r1, #1
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff fe32 	bl	80001e8 <GPIO_PClkControl>
	GPIO_Init(ptrGPIOD_Handle);
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f7ff fef5 	bl	8000374 <GPIO_Init>
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40020c00 	.word	0x40020c00

08000598 <main>:


int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	vLedConfig(&GPIOD_Handle);
 800059c:	4806      	ldr	r0, [pc, #24]	; (80005b8 <main+0x20>)
 800059e:	f7ff ffd5 	bl	800054c <vLedConfig>
	while(1)
		{
			GPIO_ToggleOutPin(GPIOD_Handle.GPIO_RegConfig, GPIO_PIN_NO_12);
 80005a2:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <main+0x20>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	210c      	movs	r1, #12
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff ffa7 	bl	80004fc <GPIO_ToggleOutPin>
			delay(500000);
 80005ae:	4803      	ldr	r0, [pc, #12]	; (80005bc <main+0x24>)
 80005b0:	f7ff ffb8 	bl	8000524 <delay>
			GPIO_ToggleOutPin(GPIOD_Handle.GPIO_RegConfig, GPIO_PIN_NO_12);
 80005b4:	e7f5      	b.n	80005a2 <main+0xa>
 80005b6:	bf00      	nop
 80005b8:	2000001c 	.word	0x2000001c
 80005bc:	0007a120 	.word	0x0007a120

080005c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005c0:	480d      	ldr	r0, [pc, #52]	; (80005f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005c4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c8:	480c      	ldr	r0, [pc, #48]	; (80005fc <LoopForever+0x6>)
  ldr r1, =_edata
 80005ca:	490d      	ldr	r1, [pc, #52]	; (8000600 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005cc:	4a0d      	ldr	r2, [pc, #52]	; (8000604 <LoopForever+0xe>)
  movs r3, #0
 80005ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005d0:	e002      	b.n	80005d8 <LoopCopyDataInit>

080005d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005d6:	3304      	adds	r3, #4

080005d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005dc:	d3f9      	bcc.n	80005d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005de:	4a0a      	ldr	r2, [pc, #40]	; (8000608 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005e0:	4c0a      	ldr	r4, [pc, #40]	; (800060c <LoopForever+0x16>)
  movs r3, #0
 80005e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e4:	e001      	b.n	80005ea <LoopFillZerobss>

080005e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e8:	3204      	adds	r2, #4

080005ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005ec:	d3fb      	bcc.n	80005e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005ee:	f000 f811 	bl	8000614 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005f2:	f7ff ffd1 	bl	8000598 <main>

080005f6 <LoopForever>:

LoopForever:
    b LoopForever
 80005f6:	e7fe      	b.n	80005f6 <LoopForever>
  ldr   r0, =_estack
 80005f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000600:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000604:	0800067c 	.word	0x0800067c
  ldr r2, =_sbss
 8000608:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800060c:	20000028 	.word	0x20000028

08000610 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000610:	e7fe      	b.n	8000610 <ADC_IRQHandler>
	...

08000614 <__libc_init_array>:
 8000614:	b570      	push	{r4, r5, r6, lr}
 8000616:	4d0d      	ldr	r5, [pc, #52]	; (800064c <__libc_init_array+0x38>)
 8000618:	4c0d      	ldr	r4, [pc, #52]	; (8000650 <__libc_init_array+0x3c>)
 800061a:	1b64      	subs	r4, r4, r5
 800061c:	10a4      	asrs	r4, r4, #2
 800061e:	2600      	movs	r6, #0
 8000620:	42a6      	cmp	r6, r4
 8000622:	d109      	bne.n	8000638 <__libc_init_array+0x24>
 8000624:	4d0b      	ldr	r5, [pc, #44]	; (8000654 <__libc_init_array+0x40>)
 8000626:	4c0c      	ldr	r4, [pc, #48]	; (8000658 <__libc_init_array+0x44>)
 8000628:	f000 f818 	bl	800065c <_init>
 800062c:	1b64      	subs	r4, r4, r5
 800062e:	10a4      	asrs	r4, r4, #2
 8000630:	2600      	movs	r6, #0
 8000632:	42a6      	cmp	r6, r4
 8000634:	d105      	bne.n	8000642 <__libc_init_array+0x2e>
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f855 3b04 	ldr.w	r3, [r5], #4
 800063c:	4798      	blx	r3
 800063e:	3601      	adds	r6, #1
 8000640:	e7ee      	b.n	8000620 <__libc_init_array+0xc>
 8000642:	f855 3b04 	ldr.w	r3, [r5], #4
 8000646:	4798      	blx	r3
 8000648:	3601      	adds	r6, #1
 800064a:	e7f2      	b.n	8000632 <__libc_init_array+0x1e>
 800064c:	08000674 	.word	0x08000674
 8000650:	08000674 	.word	0x08000674
 8000654:	08000674 	.word	0x08000674
 8000658:	08000678 	.word	0x08000678

0800065c <_init>:
 800065c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800065e:	bf00      	nop
 8000660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000662:	bc08      	pop	{r3}
 8000664:	469e      	mov	lr, r3
 8000666:	4770      	bx	lr

08000668 <_fini>:
 8000668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800066a:	bf00      	nop
 800066c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800066e:	bc08      	pop	{r3}
 8000670:	469e      	mov	lr, r3
 8000672:	4770      	bx	lr
